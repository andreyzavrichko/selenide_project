plugins {
    id 'java'
    id 'io.qameta.allure' version '2.8.1'
}

repositories {
    mavenCentral()
}

allure {
    autoconfigure = true
    aspectjVersion = '1.9.4'
    version = '2.14.0'
    useJUnit5 {
        version = '2.14.0'
    }
}

dependencies {
    testImplementation 'com.codeborne:selenide:5.25.0'
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.29'

    testImplementation 'io.qameta.allure:allure-selenide:2.14.0'
    //testImplementation 'io.qameta.allure:allure-junit5:2.14.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
}

test {
    useJUnitPlatform()

    systemProperty 'allure.link.tms.pattern','https://jira.atlassian.com/browse/{}'
    systemProperty 'allure.link.issue.pattern','https://jira.atlassian.com/browse/{}'
    systemProperty 'allure.link.issue.pattern','https://youtrack.jetbrains.com/issue/{}'
    systemProperty 'allure.link.issue.pattern','https://youtrack.jetbrains.com/issue/{}'

    systemProperty 'junit.jupiter.extensions.autodetection.enabled','true'

}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}
